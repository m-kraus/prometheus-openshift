---
apiVersion: v1
items:
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: pvc-grafana
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: '200Mi'
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    generation: 1
    labels:
      app: grafana
    name: grafana
  spec:
    replicas: 1
    selector:
      app: grafana
    strategy:
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: grafana
      spec:
        containers:
        - image: grafana/grafana:4.6.3
          imagePullPolicy: IfNotPresent
          name: grafana
          env:
            # The following env variables set up basic auth twith the default admin user and admin password.
            - name: GF_AUTH_BASIC_ENABLED
              value: "true"
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "false"
          ports:
          - containerPort: 3000
            protocol: TCP
          resources:
            limits:
              memory: '2Gi'
            requests:
              memory: '512Mi'
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: '/var/lib/grafana'
            name: pvc-grafana
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        serviceAccountName: 'grafana'
        volumes:
        - name: pvc-grafana
          persistentVolumeClaim:
            claimName: "pvc-grafana"
    test: false
    triggers:
    - type: ConfigChange
  status:
    observedGeneration: 1
    replicas: 1
    unavailableReplicas: 1
    updatedReplicas: 1
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: grafana
    name: grafana
  spec:
    ports:
    - port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      app: grafana
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    labels:
      app: grafana
    name: grafana
  spec:
    port:
      targetPort: 3000
    to:
      kind: Service
      name: grafana
      weight: 100
kind: List
metadata: {}
